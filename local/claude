#!/bin/sh

# This script manages Claude Code installation and configuration.
#
# The script performs two primary functions:
# 1. Installs Claude Code locally if not already present
# 2. Merges configurations into the global Claude configuration
#
# The configuration merge allows defining Claude settings (such as MCP servers
# amongst others) in a local claude.json file, which are then merged into the
# global ~/.claude.json configuration.
#
# Requirements:
#   - npm (for Claude installation)
#   - jq (for configuration merging, optional)

# constants
CLAUDE_DIR="${XDG_DATA_HOME:-${HOME}/.claude}/local"
CLAUDE_BIN="${CLAUDE_DIR}/node_modules/.bin/claude"
GLOBAL_CONFIG="${HOME}/.claude.json"
LOCAL_CONFIG="./claude.json"

# log to stderr and exit failure
die() {
  printf "Error: %s\n" "${1}" >&2
  exit 1
}

# ensure npm is available
ensure_npm() {
  command -v npm >/dev/null 2>&1 || die "npm is required but not installed."
}

# ensure claude is installed
ensure_claude() {
  [ -f "${CLAUDE_BIN}" ] || {
    npm install --prefix "${CLAUDE_DIR}" >/dev/null \
      && exec "${0}" "${@}"
  }
}

# attempt to merge configurations if conditions are met
attempt_merge() {
    command -v jq >/dev/null 2>&1 \
    && jq -s '.[0] * .[1]' \
      "${GLOBAL_CONFIG}" "${LOCAL_CONFIG}" >"${GLOBAL_CONFIG}.tmp" \
    && mv "${GLOBAL_CONFIG}.tmp" "${GLOBAL_CONFIG}"

  # always continue, merge is optional
  return 0
}

# launch claude with provided arguments
launch_claude() {
  exec "${CLAUDE_BIN}" "${@}"
}

# main
ensure_npm \
  && ensure_claude "${@}" \
  && attempt_merge \
  && launch_claude "${@}"
